
securing microservice from unauthorize acess
Authentication and authorization
centralized identity and access management 

To overcome this challanges wew use => 
OAuth2/openid connect , KeyCloak (IAM), spring security 

Problem that OAuth2 solves
=> why to use OAuth2 ?
	=> early we use basic authentication
	=> Early websites usually ask for credentials via an html form, which the browser will send to the server.
	=> the server authenticate the information and writes a session value in the cookie, as long as the session is still marked active user can access protected features and resourcess
	
	Drawbacks of basic authentication is 
	=> backend server have both buissness logic and authentication logic tightly coupled not rest api friendly 
	=> is dose not have proper solution to give temporory acces to give to third party platform 
	
	
	=> like google => we can use any application of google with same credential this is possible due to OAuth2
	
	=> we can singn up using multiple ways like using google , facebook, github etc
	=> using OAuth it will gather credentials from that website we dont need to share this manually 
	
	
===================================================================================================================================
Introduction to OAuth2?
	OAuth stands for Open Authentication. its free and open protocol, Build on IETF standards and licenses from the open web foundation, OAuth2.1 is a security standard where you give one application permission to access youer data in another application. the steps to grant permissions refferd to as authorization. you authorize one application to access youer data or use another application on your behalf, without giving them your password
	
	=> support all kinds of applications 
	=> seperation of Auth logic 
	=> no need to share credentials
	
	
===================================================================================================================================	
Terminology of OAuth2
	Resource owner => end user the user trying to login is the owner of username, profile etc so he is the resource owner
	Client => api who want to access resorces on behalf of credentials of resource owner
	Authorization server => the server knows about resorces owner like google, github
	Resource server => where resorces are stored that client wants to access
	scopes => what actions that client application can perform on resorce server


===================================================================================================================================	
What is OpenId connect and why it is important
	it is protocol devloped on top of OAuth2 .
	=> while OAuth2 provides authorization via an access token containing scope
	=> OpenId connect provides authentication by introducing a new id token which contain new set of information and claims specifically for identity
	=> with the id token openId connect brings standards around sharing identity details among the applications
	
	OAuth2 => Authorization
	openID connect => Authentication

	OpenId connect exposes standardized endpoint "/userinfo" 


===================================================================================================================================	
Introduction To IAM products & why KeyCloak
	=> KeyCloak is opensource and it based on OAuth2
	=> Octa and amazon cognito are aslo simmiler products as KeyCloak
	=> spring authorization server is aslo a project from spring to build authorization server if you want 
	
	=> KeyCloak is preBuild to so we are going to use this 
	

===================================================================================================================================	
Client - credential grant type flow

	we use this when two backends connecting each other
		
	client [i want to access protected resource, here is my client credentials, no user involve in this]=> Auth Server [if the credential provided are correct here is access token] => client [hey resource server i want to access protected resorce here is access token issued by auth server] => Resource server [your token is validated successfully here is youer requested resources]=> client
	
	
	
===================================================================================================================================	
Securing Gateway server using client credentials grant type flow
	steps client perform to perform the request.
	
	1) client connect with auth server with client credentials and get a access tocken 
	2) client invoke a path in edge server using access token issued by auth server 
	3) edge server validates the access tocken issued by auth server from auth server 
	4) if token is valid edge server allows the request to the actual service 
	5) unsecured services deployed behind the docker network or kubernetes firewall network. so cant be accessed directly
	
	
	here, client is external service,
		Auth server is keycloak
		resource server is gateway.
		
		we make gateway as resorce server, not individual service
		id we make individual service as resource service then for internal request aslo we need auth tocken and it will complicate process 
		by making gateway as auth server we can give entry to request by validationg token and then request can travel throgh multiple microservicess internally they dose not requird to generate tocken for each service
		
		
===================================================================================================================================	
Setup auth server using KeyCloak
	=> go to https://www.keycloak.org/guides#getting-started
	=> we are goingto start it with docker 
	=> https://www.keycloak.org/getting-started/getting-started-docker
	
	=> run this command 
	=> docker run -d -p 7080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:24.0.1 start-dev
	
	=> now go to localhost:7080 
	=> login using credential

===================================================================================================================================	
Register client details inside keycloak for client credentials grant flow 
	=> go to client => create client 
	=> Connect Type => OpenId Connect
	=> client ID => ezbank-callcenter-cc => cc means client credentials
	=> name => EzBank Call Center App
	=> Description => EzBank Call Center App
	=> click next 
	=> client authentication => on
	=> authorization => off
	=> authentication flow => service account roles
	=> click next
	=> root url => empty
	=> home url => empty
	=> save
	
	=> select our client we have created now
	=> credentials => we have client secrete here 
	=> evry time client application wants a access token from auth server they need to provide client id and this secrete key 
	
===================================================================================================================================	
Getting access token from auth server in client credential grant flow
	
	=> click on realm setting 
	=> sroll down and click => openId Endpoint configuration
	=> this will show list of endpoint urls supported by auth server 
	=> look for => token_endpoint 
	=> http://localhost:7080/realms/master/protocol/openid-connect/token
	
	=> go to postman 
	=> post => http://localhost:7080/realms/master/protocol/openid-connect/token
	=> Body => x-www-form-erlencoded => 
		grant_type => client_credentials
		client_id => ezbank-callcenter-cc	[client id]
		client_secret => kL76FqSxxwJfgOkLSWqUnDuTNelFAjsw [secrete key]
		scope => openid email profile
	
	=> send => we get 
		{
			"access_token": "Token...",
			"expires_in": 60,
			"refresh_expires_in": 0,
			"token_type": "Bearer",
			"id_token": "tocken...",
			"not-before-policy": 0,
			"scope": "openid email profile"
		}
		
		
		------------------------------------
	"grant_types_supported": [
		"authorization_code",
		"implicit",
		"refresh_token",
		"password",
		"client_credentials",		// using this now
		"urn:openid:params:grant-type:ciba",
		"urn:ietf:params:oauth:grant-type:device_code"
	]
		
===================================================================================================================================	
Securing gateway server as resource server

=> add this dependancies in gateway server
	1. spring-boot-starter-security				=> adding spring security
	2. spring-security-oauth2-resource-server	=> to convert gateway server as auth server
	3. spring-security-oauth2-jose				=> we using jwt tokens so we added this
	
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-resource-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-jose</artifactId>
		</dependency>
		

=> create config pakage => create class SecurityConfig

@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {

    @Bean
    public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity serverHttpSecurity){
        serverHttpSecurity.authorizeExchange((exchanges)-> exchanges.pathMatchers(HttpMethod.GET).permitAll()
                .pathMatchers("/ezbank/accounts/**").authenticated()
                .pathMatchers("/ezbank/cards/**").authenticated()
                .pathMatchers("/ezbank/loans/**").authenticated()
        ).oauth2ResourceServer((oAuth2ResourceServerSpec)->oAuth2ResourceServerSpec.jwt(Customizer.withDefaults()));

        serverHttpSecurity.csrf(csrfSpec -> csrfSpec.disable());

        return  serverHttpSecurity.build();
    }

}


=> add properties in properties file
spring:  
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: "http://localhost:7080/realms/master/protocol/openid-connect/certs"		
	
	

==> start all services 
=> we can access the get apis directly but we cant access other apis 
=> to access other apis we need to pass access token with it 
==> http://localhost:7080/realms/master/protocol/openid-connect/token ==> to generate access tocken 

= send tocken in authorization => OAuth2.0 => pass token 

=> we can leverage postman to generate and use token inside request => config new tocken => give all details => client authentication as send cliend credentials in body => generate and use token	

	
===================================================================================================================================	
Implementing Authorization inside gateway server using Roles
	=> insted of .authenticated() we use .hasRole() method for this

@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {

    @Bean
    public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity serverHttpSecurity){
        serverHttpSecurity.authorizeExchange((exchanges)-> exchanges.pathMatchers(HttpMethod.GET).permitAll()
                .pathMatchers("/ezbank/accounts/**").hasRole("ACCOUNTS")		// roles
                .pathMatchers("/ezbank/cards/**").hasRole("CARDS")				//
                .pathMatchers("/ezbank/loans/**").hasRole("LOANS")				//
        ).oauth2ResourceServer((oAuth2ResourceServerSpec)->oAuth2ResourceServerSpec.jwt(Customizer.withDefaults()));

        serverHttpSecurity.csrf(csrfSpec -> csrfSpec.disable());

        return  serverHttpSecurity.build();
    }

}


now we have to configure this roles inside my auth server

go to auth server => clients => select our client which we have created => here we have 2 options Role and service accounts roles
=> now our client application is not end user its another applications if end user then we configure it in Role
=> our client is another service so we will configure it in => service accounts roles

=> service accounts roles

=> to create new roles => realm roles => create role

	role name =>ACCOUNTS 
	description => accounts role 
	
	create CARDS and LOANS roles also 

=> to assign role => select client => service accounts role => assign role => select roles to assign that we have created 


=> now we have to write java logic inside gateway server to extract this roles 

public class KeyCloakRoleConverter implements Converter<Jwt, Collection<GrantedAuthority>> {
    @Override
    public Collection<GrantedAuthority> convert(Jwt source) {
        Map<String, Object> realmAccess = (Map<String, Object>) source.getClaims().get("realm_access");

        if(realmAccess == null || realmAccess.isEmpty()){
            return new ArrayList<>();
        }

        Collection<GrantedAuthority> returnValue = ((List<String>)realmAccess.get("roles"))
                .stream().map(roleName -> "ROLE_"+roleName)
                .map(SimpleGrantedAuthority::new)
                .collect(Collectors.toList());

        return returnValue;
    }

}


now do the changes in security cinfig


@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {

    @Bean
    public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity serverHttpSecurity){
        serverHttpSecurity.authorizeExchange((exchanges)-> exchanges.pathMatchers(HttpMethod.GET).permitAll()
                .pathMatchers("/ezbank/accounts/**").hasRole("ACCOUNTS")
                .pathMatchers("/ezbank/cards/**").hasRole("CARDS")
                .pathMatchers("/ezbank/loans/**").hasRole("LOANS")
        ).oauth2ResourceServer((oAuth2ResourceServerSpec)->oAuth2ResourceServerSpec
                .jwt(jwtSpec -> jwtSpec.jwtAuthenticationConverter(grantedAuthoritiesExtractor())));	// mention jwt extractor

        serverHttpSecurity.csrf(csrfSpec -> csrfSpec.disable());

        return  serverHttpSecurity.build();
    }

    private Converter<Jwt, Mono<AbstractAuthenticationToken>> grantedAuthoritiesExtractor(){	// for converting authority
        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();

        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(new KeyCloakRoleConverter());

        return new ReactiveJwtAuthenticationConverterAdapter(jwtAuthenticationConverter);
    }

}

check it using postman 


===================================================================================================================================	
Authorization Code Grant Type Flow => for end user application
	flow =>
	1) user to client i want to access my resources
	2) cleint to user tell the auth server that you are fine to do this actions
	3) user to auth server this is my credentials provide me resorces 
	4) auth server to client user allowed to access this resources here is authorization code 
	5) client to auth server here are my client credentials . AuthZ code plese provide me an access token 
	6) auth server to client here is access token from auth server
	7) client to resource server hey resource server i want to access the user resources here is accecc token from auth server 
	8) resource server to auth server check the token is valid or not 
	9) if token valid resource server sends resources to client 
	10) client send resources to user 
	
	we can check demo for it on => https://www.oauth.com/playground/


===================================================================================================================================	
To hide services remove port mapping from docker compose for services accounts, cards, loans and we can not access this directly 
we have to connect it via gateway server
===================================================================================================================================	

===================================================================================================================================	
	
	
	